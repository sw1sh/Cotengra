name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  linux-container:
    name: Linux (wolframengine container)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    container:
      image: wolframresearch/wolframengine:latest
      options: --user root
    env:
      # Hints for discovery if needed; container should already have an engine.
      WOLFRAM_SYSTEM_ID: Linux-x86-64
    steps:
      - name: Install prerequisites
        run: |
          apt-get update
          apt-get install -y curl ca-certificates git build-essential pkg-config gcc-aarch64-linux-gnu || true
      - uses: actions/checkout@v4
      - name: Install Rust (rustup)
        env:
          RUSTUP_HOME: /root/.rustup
          CARGO_HOME: /root/.cargo
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
          . /root/.cargo/env
          rustup default stable
          rustup show
          cargo --version
          rustup target add ${{ matrix.target }}
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then \
            mkdir -p .cargo; \
            echo '[target.aarch64-unknown-linux-gnu]\nlinker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml; \
          fi
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            /root/.cargo/registry
            /root/.cargo/git
            target
          key: linux-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        env:
          CARGO_HOME: /root/.cargo
        run: |
          . /root/.cargo/env
          cargo build --release --target ${{ matrix.target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/*cotengra*.*

  # macOS builds still require a Wolfram installation for WSTP; placeholder job (currently skipped)
  macos:
    if: false  # TODO: enable after adding Wolfram Engine install or making WSTP optional
    name: macOS (pending Wolfram install)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin
    steps:
      - run: echo "macOS build temporarily disabled"

  # Windows builds likewise disabled until engine strategy decided
  windows:
    if: false
    name: Windows (pending Wolfram install)
    runs-on: windows-latest
    steps:
      - run: echo "Windows build temporarily disabled"

  universal-macos:
    if: false  # disabled until macOS builds are re-enabled
    name: Create universal macOS dylib
    needs: macos
    runs-on: macos-latest
    steps:
      - run: echo "Universal macOS build disabled"

  publish:
    name: Publish (manual)
    if: github.event_name == 'workflow_dispatch'
    needs: [linux-container]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: List artifacts
        run: ls -R dist

  package-paclet:
    name: Package Paclet (Linux libs)
    needs: linux-container
    runs-on: ubuntu-latest
    container:
      image: wolframresearch/wolframengine:latest
      options: --user root
    env:
      WOLFRAM_SYSTEM_ID: Linux-x86-64
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Assemble LibraryResources
        run: |
          set -euo pipefail
          mkdir -p Cotengra/LibraryResources/Linux-x86-64
          mkdir -p Cotengra/LibraryResources/Linux-ARM64
          # Copy built shared objects into Paclet layout if available
          X64_LIB=$(find artifacts -type f -path '*/cotengra-x86_64-unknown-linux-gnu/*' -name 'libcotengra.so' | head -n1 || true)
          ARM64_LIB=$(find artifacts -type f -path '*/cotengra-aarch64-unknown-linux-gnu/*' -name 'libcotengra.so' | head -n1 || true)
          if [ -n "$X64_LIB" ]; then cp "$X64_LIB" Cotengra/LibraryResources/Linux-x86-64/; fi
          if [ -n "$ARM64_LIB" ]; then cp "$ARM64_LIB" Cotengra/LibraryResources/Linux-ARM64/; fi
          echo "Contents of LibraryResources:"; find Cotengra/LibraryResources -maxdepth 3 -type f || true
      - name: Build Paclet
        id: build_paclet
        run: |
          wolframscript -code 'Get["PacletTools`"]; path = PacletBuild["Cotengra", "OutputDirectory"->"build/paclet"]; Print["PACLET_PATH=", path];' | tee build_paclet.log
          PACLET_PATH=$(grep 'PACLET_PATH=' build_paclet.log | sed 's/.*PACLET_PATH=//')
          echo "paclet_path=$PACLET_PATH" >> $GITHUB_OUTPUT
      - name: Upload Paclet Artifact
        uses: actions/upload-artifact@v4
        with:
            name: cotengra-paclet
            path: ${{ steps.build_paclet.outputs.paclet_path }}
      - name: Upload to Wolfram Cloud (optional)
        env:
          PACLET_PATH: ${{ steps.build_paclet.outputs.paclet_path }}
          WOLFRAM_CLOUD_USER: $WOLFRAM_CLOUD_USER
          WOLFRAM_CLOUD_PASSWORD: $WOLFRAM_CLOUD_PASSWORD
        run: |
          if [ -z "$WOLFRAM_CLOUD_USER" ] || [ -z "$WOLFRAM_CLOUD_PASSWORD" ]; then
            echo "Cloud credentials not provided; skipping upload."; exit 0; fi
          wolframscript -code "CloudConnect[\"$WOLFRAM_CLOUD_USER\", \"$WOLFRAM_CLOUD_PASSWORD\"]; CopyFile[\"$PACLET_PATH\", CloudObject[\"Cotengra.paclet\", Permissions->\"Public\"], OverwriteTarget->True]; Print[\"Uploaded paclet to Wolfram Cloud.\"];"
        
