name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: Build (matrix)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13  # Intel mac
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cross deps (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]\nlinker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/*cotengra*.*

  universal-macos:
    name: Create universal macOS dylib
    needs: build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create universal binary
        run: |
          mkdir -p dist
          LIPO_INPUTS="$(find artifacts -name 'libcotengra.dylib' -maxdepth 4)"
          echo "Inputs: $LIPO_INPUTS"
          lipo -create $LIPO_INPUTS -output dist/libcotengra_universal.dylib
      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-macos-universal
          path: dist/libcotengra_universal.dylib

  publish:
    name: Publish (manual)
    if: github.event_name == 'workflow_dispatch'
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: List artifacts
        run: ls -R dist
        
