name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  linux-container:
    name: Linux (wolframengine container)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    container:
      image: wolframresearch/wolframengine:latest
      options: --user root
    env:
      # Hints for discovery if needed; container should already have an engine.
      WOLFRAM_SYSTEM_ID: Linux-x86-64
    steps:
      - name: Install prerequisites
        run: |
          apt-get update
          apt-get install -y bash curl ca-certificates git build-essential pkg-config \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu uuid-dev || true
          # If building aarch64 target, add arm64 architecture and install required runtime/dev libs
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            dpkg --add-architecture arm64
            apt-get update
            # Install uuid and stdc++ dev libs for arm64 so linker finds -luuid and -lstdc++
            apt-get install -y libuuid1:arm64 uuid-dev:arm64 libstdc++-12-dev:arm64 || true
          fi
          # Show uuid libs for x86 host (helps debug -luuid failure on x86)
          echo "Checking host uuid libraries:"; ls -1 /usr/lib/x86_64-linux-gnu/libuuid* || true
          ldconfig -p | grep -i uuid || true
      - name: Locate Wolfram Engine
        run: |
          set -euo pipefail
          if command -v WolframKernel >/dev/null 2>&1; then
            KERNEL=$(readlink -f "$(command -v WolframKernel)")
            EXEC_DIR=$(dirname "$KERNEL")
            ENGINE_ROOT=$(dirname "$EXEC_DIR")  # keep versioned directory (contains SystemFiles)
            echo "Detected WolframKernel: $KERNEL"
            echo "Executables dir: $EXEC_DIR"
            echo "Engine root (versioned): $ENGINE_ROOT"
            if [ ! -d "$ENGINE_ROOT/SystemFiles" ]; then
              echo "WARNING: Expected SystemFiles not found under $ENGINE_ROOT" >&2
            fi
            echo "WOLFRAM_APP_DIRECTORY=$ENGINE_ROOT" >> $GITHUB_ENV
            # Discover DeveloperKit CompilerAdditions explicitly
            DEVKIT_SEARCH_BASE="$ENGINE_ROOT/SystemFiles/Links/WSTP/DeveloperKit"
            if [ -d "$DEVKIT_SEARCH_BASE" ]; then
              DEVKIT_DIR=$(find "$DEVKIT_SEARCH_BASE" -maxdepth 3 -type d -name CompilerAdditions -print -quit 2>/dev/null || true)
            else
              DEVKIT_DIR=""
            fi
            if [ -n "$DEVKIT_DIR" ]; then
              echo "Found CompilerAdditions: $DEVKIT_DIR"
              echo "WSTP_COMPILER_ADDITIONS_DIRECTORY=$DEVKIT_DIR" >> $GITHUB_ENV
              echo "Listing contents:"; ls -1 "$DEVKIT_DIR" || true
            else
              echo "WARNING: Could not locate CompilerAdditions under $DEVKIT_SEARCH_BASE" >&2
              echo "Will rely on wolfram-app-discovery fallback; wstp-sys may fail." >&2
            fi
          else
            echo "WolframKernel not found in PATH; wstp-sys may fail" >&2
          fi
      - uses: actions/checkout@v4
      - name: Install Rust (rustup)
        env:
          RUSTUP_HOME: /root/.rustup
          CARGO_HOME: /root/.cargo
        run: |
          set -euo pipefail
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain stable
          . /root/.cargo/env
          # Explicitly (re)install stable to be safe and show toolchains
          rustup toolchain install stable
          rustup default stable
          rustup target add ${{ matrix.target }}
          echo "Toolchains installed:"; ls -1 /root/.rustup/toolchains || true
          rustup show
          which cargo
          cargo --version
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            mkdir -p .cargo
            # Overwrite with clean config ensuring valid TOML (avoid literal \n sequences)
              printf '%s\n%s\n' '[target.aarch64-unknown-linux-gnu]' 'linker = "aarch64-linux-gnu-gcc"' > .cargo/config.toml
            echo "Written .cargo/config.toml:"; cat .cargo/config.toml
            echo 'CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc' >> $GITHUB_ENV
            echo 'CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++' >> $GITHUB_ENV
          fi
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            /root/.cargo/registry
            /root/.cargo/git
            target
          key: linux-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        env:
          CARGO_HOME: /root/.cargo
          RUSTUP_HOME: /root/.rustup
        run: |
          set -euo pipefail
          . /root/.cargo/env
          echo "Active toolchain:"; rustup show active-toolchain || true
          rustup --version || true
            # List targets to confirm installation
          rustup target list --installed
          echo "Linker version (cc):"; cc --version || true
          echo "C++ compiler version (g++):"; g++ --version || true
          echo "Searching for libuuid (pre-build):"; find /usr/lib -maxdepth 4 -name 'libuuid.*' 2>/dev/null | head -n 20 || true
          echo "Environmental CC (if any): ${CC:-<unset>}"; echo "Environmental CXX (if any): ${CXX:-<unset>}"
          cargo build --release --target ${{ matrix.target }}
          echo "Searching for libuuid (post-build):"; find /usr/lib -maxdepth 4 -name 'libuuid.*' 2>/dev/null | head -n 20 || true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/*cotengra*.*

  # macOS builds still require a Wolfram installation for WSTP; placeholder job (currently skipped)
  macos:
    if: false  # TODO: enable after adding Wolfram Engine install or making WSTP optional
    name: macOS (pending Wolfram install)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin
    steps:
      - run: echo "macOS build temporarily disabled"

  # Windows builds likewise disabled until engine strategy decided
  windows:
    if: false
    name: Windows (pending Wolfram install)
    runs-on: windows-latest
    steps:
      - run: echo "Windows build temporarily disabled"

  universal-macos:
    if: false  # disabled until macOS builds are re-enabled
    name: Create universal macOS dylib
    needs: macos
    runs-on: macos-latest
    steps:
      - run: echo "Universal macOS build disabled"

  publish:
    name: Publish (manual)
    if: github.event_name == 'workflow_dispatch'
    needs: [linux-container]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: List artifacts
        run: ls -R dist

  package-paclet:
    name: Package Paclet (Linux libs)
    needs: linux-container
    runs-on: ubuntu-latest
    container:
      image: wolframresearch/wolframengine:latest
      options: --user root
    env:
      WOLFRAM_SYSTEM_ID: Linux-x86-64
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Assemble LibraryResources
        run: |
          set -euo pipefail
          mkdir -p Cotengra/LibraryResources/Linux-x86-64
          mkdir -p Cotengra/LibraryResources/Linux-ARM64
          # Copy built shared objects into Paclet layout if available
          X64_LIB=$(find artifacts -type f -path '*/cotengra-x86_64-unknown-linux-gnu/*' -name 'libcotengra.so' | head -n1 || true)
          ARM64_LIB=$(find artifacts -type f -path '*/cotengra-aarch64-unknown-linux-gnu/*' -name 'libcotengra.so' | head -n1 || true)
          if [ -n "$X64_LIB" ]; then cp "$X64_LIB" Cotengra/LibraryResources/Linux-x86-64/; fi
          if [ -n "$ARM64_LIB" ]; then cp "$ARM64_LIB" Cotengra/LibraryResources/Linux-ARM64/; fi
          echo "Preserving any pre-existing LibraryResources (e.g. MacOSX-*) committed in repo."
          echo "Contents of LibraryResources:"; find Cotengra/LibraryResources -maxdepth 3 -type f || true
      - name: Archive LibraryResources
        run: |
          set -euo pipefail
          mkdir -p build
          tar czf build/LibraryResources.tar.gz Cotengra/LibraryResources
          echo "Archive size:"; du -h build/LibraryResources.tar.gz
      - name: Upload LibraryResources Archive
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-libraryresources
          path: build/LibraryResources.tar.gz
      - name: Build Paclet (action)
        id: build_paclet
        uses: WolframResearch/build-paclet@v1.11.0
        with:
          target: Build
          check: false
          paclet_cicd_version: 0.36.0
      - name: Locate Paclet File
        id: locate_paclet
        run: |
          set -euo pipefail
          # Prefer action-provided path if exposed
          if [ -n "${PACLET_PATH:-}" ] && [ -f "$PACLET_PATH" ]; then
            echo "Found paclet via PACLET_PATH=$PACLET_PATH"
            echo "paclet_path=$PACLET_PATH" >> $GITHUB_OUTPUT
            exit 0
          fi
          FOUND=$(find . -maxdepth 6 -type f -name 'Cotengra*.paclet' | head -n1 || true)
          if [ -z "$FOUND" ]; then echo "No .paclet file found" >&2; exit 1; fi
          echo "Found paclet at $FOUND"
          echo "paclet_path=$FOUND" >> $GITHUB_OUTPUT
      - name: Upload Paclet Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-paclet
          path: ${{ steps.locate_paclet.outputs.paclet_path }}
      - name: Upload to Wolfram Cloud (optional)
        env:
          PACLET_PATH: ${{ steps.locate_paclet.outputs.paclet_path }}
          WOLFRAM_CLOUD_USER: $WOLFRAM_CLOUD_USER
          WOLFRAM_CLOUD_PASSWORD: $WOLFRAM_CLOUD_PASSWORD
        run: |
          if [ -z "$WOLFRAM_CLOUD_USER" ] || [ -z "$WOLFRAM_CLOUD_PASSWORD" ]; then
            echo "Cloud credentials not provided; skipping upload."; exit 0; fi
          wolframscript -code "CloudConnect[\"$WOLFRAM_CLOUD_USER\", \"$WOLFRAM_CLOUD_PASSWORD\"]; CopyFile[\"$PACLET_PATH\", CloudObject[\"Cotengra.paclet\", Permissions->\"Public\"], OverwriteTarget->True]; Print[\"Uploaded paclet to Wolfram Cloud.\"];" || { echo 'Paclet upload failed'; exit 1; }
          LIB_UPLOAD_CODE=$(cat <<'EOF'
            Quiet@Module[{base = FileNameJoin[{Directory[], "Cotengra", "LibraryResources"}], files},
              files = FileNames["*", base, Infinity];
              Do[
                CloudPut[Import[f, "ByteArray"], 
                  CloudObject[FileNameJoin[{"Cotengra","libs", StringDrop[f, StringLength[base]+2]}], Permissions->"Public"], 
                  OverwriteTarget->True],
                {f, files}
              ];
              Print["Uploaded "<> ToString[Length[files]] <> " library resource files."]
            ]
          EOF
          )
          wolframscript -code "$LIB_UPLOAD_CODE" || echo "Library upload encountered an error (continuing)"
        
