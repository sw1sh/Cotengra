name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  linux-x86_64:
    name: Linux x86_64 (native, WSTP)
    runs-on: ubuntu-latest
    container:
      image: wolframresearch/wolframengine:latest
      options: --user root
    env:
      TARGET: x86_64-unknown-linux-gnu
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      RUSTUP_HOME: /root/.rustup
      CARGO_HOME: /root/.cargo
    steps:
      - name: Install prerequisites
        run: |
          set -euxo pipefail
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y bash curl ca-certificates git build-essential pkg-config uuid-dev
          ls -1 /usr/lib/x86_64-linux-gnu/libuuid* || true
      - name: Locate Wolfram Engine / DeveloperKit
        run: |
          set -euo pipefail
          if command -v WolframKernel >/dev/null 2>&1; then
            KERNEL=$(readlink -f "$(command -v WolframKernel)")
            EXEC_DIR=$(dirname "$KERNEL"); ENGINE_ROOT=$(dirname "$EXEC_DIR")
            echo "WOLFRAM_APP_DIRECTORY=$ENGINE_ROOT" >> $GITHUB_ENV
            DEVKIT_DIR=$(find "$ENGINE_ROOT/SystemFiles/Links/WSTP/DeveloperKit" -maxdepth 4 -type d -name CompilerAdditions -print -quit 2>/dev/null || true)
            [ -n "$DEVKIT_DIR" ] && echo "WSTP_COMPILER_ADDITIONS_DIRECTORY=$DEVKIT_DIR" >> $GITHUB_ENV || echo "WARN: no CompilerAdditions"
          else
            echo "ERROR: WolframKernel not in PATH" >&2
          fi
      - uses: actions/checkout@v4
      - name: Install Rust
        run: |
          set -euo pipefail
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain stable
          . /root/.cargo/env
          rustup toolchain install stable --profile minimal
          rustup default stable
          rustup target add $TARGET
          echo "Installed toolchains:"; rustup toolchain list
          rustup show active-toolchain
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            /root/.cargo/registry
            /root/.cargo/git
            target
          key: linux-${{ env.TARGET }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: |
          set -euo pipefail
          . /root/.cargo/env || true
          rustup show active-toolchain || { echo 'No active toolchain; setting stable'; rustup default stable; }
          rustup target list --installed || true
          cargo --version || { echo 'Cargo missing; aborting'; exit 1; }
          cargo build --release --target $TARGET
          ls -1 target/$TARGET/release || true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-${{ env.TARGET }}
          path: target/${{ env.TARGET }}/release/*cotengra*.*

  linux-arm64:
    name: Linux ARM64 (native, WSTP)
    # GitHub-hosted arm runner; adjust label if using another variant
    runs-on: ubuntu-24.04-arm
    container:
      image: wolframresearch/wolframengine:latest
      options: --user root
    env:
      TARGET: aarch64-unknown-linux-gnu
      WOLFRAM_SYSTEM_ID: Linux-ARM64
      RUSTUP_HOME: /root/.rustup
      CARGO_HOME: /root/.cargo
    steps:
      - name: Verify architecture
        run: uname -m
      - name: Install prerequisites
        run: |
          set -euxo pipefail
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y bash curl ca-certificates git build-essential pkg-config uuid-dev
          # ARM uuid libs
          ls -1 /usr/lib/*/libuuid* || true
      - name: Locate Wolfram Engine / DeveloperKit
        run: |
          set -euo pipefail
          if command -v WolframKernel >/dev/null 2>&1; then
            KERNEL=$(readlink -f "$(command -v WolframKernel)")
            EXEC_DIR=$(dirname "$KERNEL"); ENGINE_ROOT=$(dirname "$EXEC_DIR")
            echo "WOLFRAM_APP_DIRECTORY=$ENGINE_ROOT" >> $GITHUB_ENV
            DEVKIT_DIR=$(find "$ENGINE_ROOT/SystemFiles/Links/WSTP/DeveloperKit" -maxdepth 5 -type d -path '*Linux-ARM64*/*/CompilerAdditions' -print -quit 2>/dev/null || true)
            if [ -z "$DEVKIT_DIR" ]; then
              DEVKIT_DIR=$(find "$ENGINE_ROOT/SystemFiles/Links/WSTP/DeveloperKit" -maxdepth 5 -type d -name CompilerAdditions -print -quit 2>/dev/null || true)
            fi
            [ -n "$DEVKIT_DIR" ] && echo "WSTP_COMPILER_ADDITIONS_DIRECTORY=$DEVKIT_DIR" >> $GITHUB_ENV || echo "WARN: no ARM64 CompilerAdditions"
          else
            echo "ERROR: WolframKernel not in PATH" >&2
          fi
      - uses: actions/checkout@v4
      - name: Install Rust
        run: |
          set -euo pipefail
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain stable
          . /root/.cargo/env
          rustup toolchain install stable --profile minimal
          rustup default stable
          rustup target add $TARGET
          echo "Installed toolchains:"; rustup toolchain list
          rustup show active-toolchain
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            /root/.cargo/registry
            /root/.cargo/git
            target
          key: linux-${{ env.TARGET }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: |
          set -euo pipefail
          . /root/.cargo/env || true
          rustup show active-toolchain || { echo 'No active toolchain; setting stable'; rustup default stable; }
          rustup target list --installed || true
          cargo --version || { echo 'Cargo missing; aborting'; exit 1; }
          cargo build --release --target $TARGET
          ls -1 target/$TARGET/release || true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-${{ env.TARGET }}
          path: target/${{ env.TARGET }}/release/*cotengra*.*

  # macOS builds still require a Wolfram installation for WSTP; placeholder job (currently skipped)
  macos:
    if: false  # TODO: enable after adding Wolfram Engine install or making WSTP optional
    name: macOS (pending Wolfram install)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin
    steps:
      - run: echo "macOS build temporarily disabled"

  # Windows builds likewise disabled until engine strategy decided
  windows:
    if: false
    name: Windows (pending Wolfram install)
    runs-on: windows-latest
    steps:
      - run: echo "Windows build temporarily disabled"

  universal-macos:
    if: false  # disabled until macOS builds are re-enabled
    name: Create universal macOS dylib
    needs: macos
    runs-on: macos-latest
    steps:
      - run: echo "Universal macOS build disabled"

  publish:
    name: Publish (manual)
    if: github.event_name == 'workflow_dispatch'
    needs: [linux-x86_64, linux-arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: List artifacts
        run: ls -R dist

  package-paclet:
    name: Package Paclet (Linux x86_64 + ARM64)
    needs: [linux-x86_64, linux-arm64]
    runs-on: ubuntu-latest
    container:
      image: wolframresearch/wolframengine:latest
      options: --user root
    env:
      WOLFRAM_SYSTEM_ID: Linux-x86-64
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Assemble LibraryResources
        run: |
          set -euo pipefail
          mkdir -p Cotengra/LibraryResources/Linux-x86-64 Cotengra/LibraryResources/Linux-ARM64
          X64_LIB=$(find artifacts -type f -path '*/cotengra-x86_64-unknown-linux-gnu/*' -name 'libcotengra.so' | head -n1 || true)
          ARM64_LIB=$(find artifacts -type f -path '*/cotengra-aarch64-unknown-linux-gnu/*' -name 'libcotengra.so' | head -n1 || true)
          if [ -n "$X64_LIB" ]; then cp "$X64_LIB" Cotengra/LibraryResources/Linux-x86-64/; echo "Copied x86_64 lib"; fi
          if [ -n "$ARM64_LIB" ]; then cp "$ARM64_LIB" Cotengra/LibraryResources/Linux-ARM64/; echo "Copied ARM64 lib"; else echo "NOTE: No ARM64 lib found (build may have failed)."; fi
          echo "Preserving any pre-existing LibraryResources (e.g. MacOSX-*) committed in repo."
          echo "Contents of LibraryResources:"; find Cotengra/LibraryResources -maxdepth 3 -type f || true
      - name: Archive LibraryResources
        run: |
          set -euo pipefail
          mkdir -p build
          tar czf build/LibraryResources.tar.gz Cotengra/LibraryResources
          echo "Archive size:"; du -h build/LibraryResources.tar.gz
      - name: Upload LibraryResources Archive
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-libraryresources
          path: build/LibraryResources.tar.gz
      - name: Build Paclet (action)
        id: build_paclet
        uses: WolframResearch/build-paclet@v1.11.0
        with:
          target: Build
          check: false
          paclet_cicd_version: 0.36.0
      - name: Locate Paclet File
        id: locate_paclet
        run: |
          set -euo pipefail
          # Prefer action-provided path if exposed
          if [ -n "${PACLET_PATH:-}" ] && [ -f "$PACLET_PATH" ]; then
            echo "Found paclet via PACLET_PATH=$PACLET_PATH"
            echo "paclet_path=$PACLET_PATH" >> $GITHUB_OUTPUT
            exit 0
          fi
          FOUND=$(find . -maxdepth 6 -type f -name 'Cotengra*.paclet' | head -n1 || true)
          if [ -z "$FOUND" ]; then echo "No .paclet file found" >&2; exit 1; fi
          echo "Found paclet at $FOUND"
          echo "paclet_path=$FOUND" >> $GITHUB_OUTPUT
      - name: Upload Paclet Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cotengra-paclet
          path: ${{ steps.locate_paclet.outputs.paclet_path }}
      - name: Upload to Wolfram Cloud (optional)
        env:
          PACLET_PATH: ${{ steps.locate_paclet.outputs.paclet_path }}
          WOLFRAM_CLOUD_USER: $WOLFRAM_CLOUD_USER
          WOLFRAM_CLOUD_PASSWORD: $WOLFRAM_CLOUD_PASSWORD
        run: |
          if [ -z "$WOLFRAM_CLOUD_USER" ] || [ -z "$WOLFRAM_CLOUD_PASSWORD" ]; then
            echo "Cloud credentials not provided; skipping upload."; exit 0; fi
          wolframscript -code "CloudConnect[\"$WOLFRAM_CLOUD_USER\", \"$WOLFRAM_CLOUD_PASSWORD\"]; CopyFile[\"$PACLET_PATH\", CloudObject[\"Cotengra.paclet\", Permissions->\"Public\"], OverwriteTarget->True]; Print[\"Uploaded paclet to Wolfram Cloud.\"];" || { echo 'Paclet upload failed'; exit 1; }
          LIB_UPLOAD_CODE=$(cat <<'EOF'
            Quiet@Module[{base = FileNameJoin[{Directory[], "Cotengra", "LibraryResources"}], files},
              files = FileNames["*", base, Infinity];
              Do[
                CloudPut[Import[f, "ByteArray"], 
                  CloudObject[FileNameJoin[{"Cotengra","libs", StringDrop[f, StringLength[base]+2]}], Permissions->"Public"], 
                  OverwriteTarget->True],
                {f, files}
              ];
              Print["Uploaded "<> ToString[Length[files]] <> " library resource files."]
            ]
          EOF
          )
          wolframscript -code "$LIB_UPLOAD_CODE" || echo "Library upload encountered an error (continuing)"
        
