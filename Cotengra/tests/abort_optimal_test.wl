(* Test that optimize_optimal can be aborted from WL using TimeConstrained *)
PacletDirectoryLoad["Cotengra"]
Needs["Wolfram`Cotengra`"];

{input, output, dimensions} = {{{20}, {6}, {21}, {3}, {1}, {7}, {4}, 
    {9}, {2}, {5}, {46}, {27}, {11}, {28}, {22}, {16}, {8}, {23}, {19}, {
    15}, {12, 1, 2}, {14, 3, 4}, {50, 10, 18, 5}, {13, 56, 6, 7, 8}, {37,
     29, 9, 10, 11}, {44, 26, 31, 12, 13, 14, 15}, {33, 17, 51, 48, 16}, 
    {49, 17, 18, 19}, {24, 25, 30, 58, 20, 21, 22, 23}, {32, 34, 24, 25, 
    26, 27, 28}, {63, 29, 30, 31}, {40, 41, 38, 45, 35, 47, 36, 32, 33, 34
    }, {39, 43, 35, 36}, {53, 42, 67, 73, 59, 37, 38, 39}, {54, 68, 40, 41,
     42, 43}, {60, 129, 84, 44}, {52, 57, 69, 45, 46, 47, 48, 49}, {66, 77,
     64, 70, 65, 50, 51, 52}, {61, 96, 55, 53, 54}, {75, 55, 56}, {62, 83,
     57}, {90, 58, 59}, {74, 60, 61}, {102, 72, 92, 86, 78, 62, 63, 64, 65
    }, {103, 85, 71, 66, 67, 68, 69}, {88, 94, 70, 71}, {80, 89, 72, 73},
     {79, 76, 74, 75}, {82, 117, 120, 95, 81, 76, 77, 78}, {91, 79, 80}, 
    {87, 125, 81}, {104, 132, 82, 83}, {182, 93, 84, 85, 86}, {139, 98, 108,
     87, 88, 89, 90}, {99, 100, 110, 97, 111, 118, 91, 92, 93, 94, 95}, {
    101, 96, 97, 98}, {109, 116, 107, 106, 99, 100, 101}, {150, 105, 102,
     103}, {138, 104, 105, 106}, {112, 107, 108}, {115, 121, 113, 123, 114,
     124, 109, 110, 111}, {119, 112, 113, 114}, {127, 122, 115, 116, 117,
     118}, {189, 119, 120}, {126, 121, 122, 123, 124, 125}, {130, 145, 148,
     128, 162, 126}, {133, 131, 160, 164, 135, 136, 137, 127, 128}, {134,
     129, 130, 131, 132}, {140, 156, 157, 141, 146, 144, 149, 153, 133, 134,
     135, 136, 137}, {142, 143, 170, 138}, {154, 139}, {147, 140, 141, 142,
     143, 144}, {158, 193, 145, 146}, {171, 172, 176, 151, 152, 147, 148,
     149}, {168, 163, 166, 150, 151, 152, 153}, {155, 173, 205, 161, 154},
     {159, 225, 155, 156, 157, 158}, {188, 183, 185, 159, 160, 161, 162},
     {187, 204, 165, 167, 163}, {191, 169, 164, 165, 166, 167}, {174, 194,
     180, 175, 168, 169, 170}, {178, 177, 200, 181, 171, 172, 173, 174, 175
    }, {179, 192, 176, 177}, {190, 196, 184, 215, 186, 178, 179, 180, 181
    }, {199, 206, 182, 183, 184, 185, 186}, {203, 208, 187, 188, 189}, {238,
     224, 217, 251, 195, 197, 201, 198, 202, 190, 191, 192, 193, 194}, {218,
     213, 195, 196, 197, 198}, {209, 216, 199, 200, 201, 202}, {207, 220,
     252, 222, 241, 242, 210, 211, 203, 204, 205, 206}, {212, 214, 262, 207,
     208, 209, 210, 211}, {219, 212, 213, 214, 215, 216}, {221, 223, 217,
     218}, {246, 232, 229, 302, 219, 220, 221, 222, 223}, {227, 239, 248,
     230, 231, 266, 226, 224, 225}, {228, 236, 226}, {233, 234, 235, 227,
     228, 229, 230, 231}, {250, 247, 243, 237, 270, 232, 233, 234, 235, 236
    }, {267, 240, 271, 245, 237}, {255, 268, 249, 258, 244, 254, 238, 239,
     240, 241, 242}, {263, 273, 243, 244, 245}, {253, 246, 247, 248, 249},
     {312, 260, 256, 261, 257, 306, 264, 259, 298, 250, 251, 252, 253, 254
    }, {269, 255, 256, 257, 258, 259}, {265, 260, 261, 262}, {280, 274, 263,
     264, 265, 266}, {292, 293, 272, 286, 311, 267, 268, 269, 270}, {283,
     284, 275, 313, 278, 314, 276, 279, 271, 272, 273}, {285, 301, 277, 281,
     282, 274, 275, 276}, {295, 277, 278, 279}, {291, 280, 281, 282}, {287,
     300, 288, 289, 315, 296, 310, 283, 284, 285, 286}, {290, 304, 294, 316,
     287, 288, 289}, {303, 307, 290, 291}, {299, 305, 297, 292, 293, 294,
     295, 296}, {317, 318, 319, 297, 298}, {308, 320, 321, 299, 300, 301,
     302}, {309, 322, 323, 324, 325, 326, 303, 304, 305, 306, 307}, {327,
     328, 308, 309, 310}, {329, 311}}, {312, 327, 317, 329, 320, 328, 322,
     323, 313, 324, 318, 325, 314, 315, 316, 326, 319, 321}, <|20 -> 2, 6
     -> 2, 21 -> 2, 3 -> 2, 1 -> 2, 7 -> 2, 4 -> 2, 9 -> 2, 2 -> 2, 5 -> 
    2, 46 -> 2, 27 -> 2, 11 -> 2, 28 -> 2, 22 -> 2, 16 -> 2, 8 -> 2, 23 ->
     2, 19 -> 2, 15 -> 2, 12 -> 2, 14 -> 2, 50 -> 2, 10 -> 2, 18 -> 2, 13
     -> 2, 56 -> 2, 37 -> 2, 29 -> 2, 44 -> 2, 26 -> 2, 31 -> 2, 33 -> 2,
     17 -> 2, 51 -> 2, 48 -> 2, 49 -> 2, 24 -> 2, 25 -> 2, 30 -> 2, 58 ->
     2, 32 -> 2, 34 -> 2, 63 -> 2, 40 -> 2, 41 -> 2, 38 -> 2, 45 -> 2, 35
     -> 2, 47 -> 2, 36 -> 2, 39 -> 2, 43 -> 2, 53 -> 2, 42 -> 2, 67 -> 2,
     73 -> 2, 59 -> 2, 54 -> 2, 68 -> 2, 60 -> 2, 129 -> 2, 84 -> 2, 52 ->
     2, 57 -> 2, 69 -> 2, 66 -> 2, 77 -> 2, 64 -> 2, 70 -> 2, 65 -> 2, 61
     -> 2, 96 -> 2, 55 -> 2, 75 -> 2, 62 -> 2, 83 -> 2, 90 -> 2, 74 -> 2,
     102 -> 2, 72 -> 2, 92 -> 2, 86 -> 2, 78 -> 2, 103 -> 2, 85 -> 2, 71 
    -> 2, 88 -> 2, 94 -> 2, 80 -> 2, 89 -> 2, 79 -> 2, 76 -> 2, 82 -> 2, 
    117 -> 2, 120 -> 2, 95 -> 2, 81 -> 2, 91 -> 2, 87 -> 2, 125 -> 2, 104
     -> 2, 132 -> 2, 182 -> 2, 93 -> 2, 139 -> 2, 98 -> 2, 108 -> 2, 99 ->
     2, 100 -> 2, 110 -> 2, 97 -> 2, 111 -> 2, 118 -> 2, 101 -> 2, 109 ->
     2, 116 -> 2, 107 -> 2, 106 -> 2, 150 -> 2, 105 -> 2, 138 -> 2, 112 ->
     2, 115 -> 2, 121 -> 2, 113 -> 2, 123 -> 2, 114 -> 2, 124 -> 2, 119 ->
     2, 127 -> 2, 122 -> 2, 189 -> 2, 126 -> 2, 130 -> 2, 145 -> 2, 148 ->
     2, 128 -> 2, 162 -> 2, 133 -> 2, 131 -> 2, 160 -> 2, 164 -> 2, 135 ->
     2, 136 -> 2, 137 -> 2, 134 -> 2, 140 -> 2, 156 -> 2, 157 -> 2, 141 ->
     2, 146 -> 2, 144 -> 2, 149 -> 2, 153 -> 2, 142 -> 2, 143 -> 2, 170 ->
     2, 154 -> 2, 147 -> 2, 158 -> 2, 193 -> 2, 171 -> 2, 172 -> 2, 176 ->
     2, 151 -> 2, 152 -> 2, 168 -> 2, 163 -> 2, 166 -> 2, 155 -> 2, 173 ->
     2, 205 -> 2, 161 -> 2, 159 -> 2, 225 -> 2, 188 -> 2, 183 -> 2, 185 ->
     2, 187 -> 2, 204 -> 2, 165 -> 2, 167 -> 2, 191 -> 2, 169 -> 2, 174 ->
     2, 194 -> 2, 180 -> 2, 175 -> 2, 178 -> 2, 177 -> 2, 200 -> 2, 181 ->
     2, 179 -> 2, 192 -> 2, 190 -> 2, 196 -> 2, 184 -> 2, 215 -> 2, 186 ->
     2, 199 -> 2, 206 -> 2, 203 -> 2, 208 -> 2, 238 -> 2, 224 -> 2, 217 ->
     2, 251 -> 2, 195 -> 2, 197 -> 2, 201 -> 2, 198 -> 2, 202 -> 2, 218 ->
     2, 213 -> 2, 209 -> 2, 216 -> 2, 207 -> 2, 220 -> 2, 252 -> 2, 222 ->
     2, 241 -> 2, 242 -> 2, 210 -> 2, 211 -> 2, 212 -> 2, 214 -> 2, 262 ->
     2, 219 -> 2, 221 -> 2, 223 -> 2, 246 -> 2, 232 -> 2, 229 -> 2, 302 ->
     2, 227 -> 2, 239 -> 2, 248 -> 2, 230 -> 2, 231 -> 2, 266 -> 2, 226 ->
     2, 228 -> 2, 236 -> 2, 233 -> 2, 234 -> 2, 235 -> 2, 250 -> 2, 247 ->
     2, 243 -> 2, 237 -> 2, 270 -> 2, 267 -> 2, 240 -> 2, 271 -> 2, 245 ->
     2, 255 -> 2, 268 -> 2, 249 -> 2, 258 -> 2, 244 -> 2, 254 -> 2, 263 ->
     2, 273 -> 2, 253 -> 2, 312 -> 2, 260 -> 2, 256 -> 2, 261 -> 2, 257 ->
     2, 306 -> 2, 264 -> 2, 259 -> 2, 298 -> 2, 269 -> 2, 265 -> 2, 280 ->
     2, 274 -> 2, 292 -> 2, 293 -> 2, 272 -> 2, 286 -> 2, 311 -> 2, 283 ->
     2, 284 -> 2, 275 -> 2, 313 -> 2, 278 -> 2, 314 -> 2, 276 -> 2, 279 ->
     2, 285 -> 2, 301 -> 2, 277 -> 2, 281 -> 2, 282 -> 2, 295 -> 2, 291 ->
     2, 287 -> 2, 300 -> 2, 288 -> 2, 289 -> 2, 315 -> 2, 296 -> 2, 310 ->
     2, 290 -> 2, 304 -> 2, 294 -> 2, 316 -> 2, 303 -> 2, 307 -> 2, 299 ->
     2, 305 -> 2, 297 -> 2, 317 -> 2, 318 -> 2, 319 -> 2, 308 -> 2, 320 ->
     2, 321 -> 2, 309 -> 2, 322 -> 2, 323 -> 2, 324 -> 2, 325 -> 2, 326 ->
     2, 327 -> 2, 328 -> 2, 329 -> 2|>}

(* run optimize_optimal but abort it if it takes longer than 1 second *)

res = TimeConstrained[OptimalPath[input, output, dimensions], 1, $Aborted];

Print["Result: ", res];
